\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8}]
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}iostream\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}string\PYGZgt{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}cxxtest/TestSuite.h\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}ExecutableSupport.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}Exception.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}PetscTools.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}PetscException.hpp\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}WanStemCellCycleModel.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}HeCellCycleModel.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}OffLatticeSimulation.hpp\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}AbstractCellBasedTestSuite.hpp\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}WildTypeCellMutationState.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}StemCellProliferativeType.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}TransitCellProliferativeType.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}DifferentiatedCellProliferativeType.hpp\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}CellsGenerator.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}HoneycombMeshGenerator.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}NodesOnlyMesh.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}NodeBasedCellPopulation.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}VertexBasedCellPopulation.hpp\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}CellProliferativeTypesCountWriter.hpp\PYGZdq{}}


\PYG{k+kt}{int} \PYG{n+nf}{main}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{argc}\PYG{p}{,} \PYG{k+kt}{char} \PYG{o}{*}\PYG{n}{argv}\PYG{p}{[])}
\PYG{p}{\PYGZob{}}
    \PYG{n}{ExecutableSupport}\PYG{o}{::}\PYG{n}{StartupWithoutShowingCopyright}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{argc}\PYG{p}{,} \PYG{o}{\PYGZam{}}\PYG{n}{argv}\PYG{p}{);}
    \PYG{c+c1}{//main() returns code indicating sim run success or failure mode}
    \PYG{k+kt}{int} \PYG{n}{exit\PYGZus{}code} \PYG{o}{=} \PYG{n}{ExecutableSupport}\PYG{o}{::}\PYG{n}{EXIT\PYGZus{}OK}\PYG{p}{;}

    \PYG{c+cm}{/***********************}
\PYG{c+cm}{     * SIMULATOR PARAMETERS}
\PYG{c+cm}{     ***********************/}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{string} \PYG{n}{directoryString}\PYG{p}{,} \PYG{n}{filenameString}\PYG{p}{;}

    \PYG{c+c1}{//PARSE ARGUMENTS}
    \PYG{n}{directoryString} \PYG{o}{=} \PYG{n}{argv}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{];}
    \PYG{n}{filenameString} \PYG{o}{=} \PYG{n}{argv}\PYG{p}{[}\PYG{l+m+mi}{2}\PYG{p}{];}

    \PYG{c+cm}{/************************}
\PYG{c+cm}{     * SIMULATOR OUTPUT SETUP}
\PYG{c+cm}{     ************************/}

\PYG{c+c1}{//Set up singleton LogFile}
    \PYG{n}{LogFile}\PYG{o}{*} \PYG{n}{p\PYGZus{}log} \PYG{o}{=} \PYG{n}{LogFile}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{();}
    \PYG{n}{p\PYGZus{}log}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{Set}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,} \PYG{n}{directoryString}\PYG{p}{,} \PYG{n}{filenameString}\PYG{p}{);}

    \PYG{n}{ExecutableSupport}\PYG{o}{::}\PYG{n}{Print}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}Simulator writing file \PYGZdq{}} \PYG{o}{+} \PYG{n}{filenameString} \PYG{o}{+} \PYG{l+s}{\PYGZdq{} to directory \PYGZdq{}} \PYG{o}{+} \PYG{n}{directoryString}\PYG{p}{);}

\PYG{c+c1}{//Log entry counter}
    \PYG{c+c1}{//unsigned entry\PYGZus{}number = 1;}

\PYG{c+c1}{//Write appropriate header to log}
    \PYG{o}{*}\PYG{n}{p\PYGZus{}log} \PYG{o}{\PYGZlt{}\PYGZlt{}} \PYG{l+s}{\PYGZdq{}Entry}\PYG{l+s+se}{\PYGZbs{}t}\PYG{l+s}{TotalCells}\PYG{l+s+se}{\PYGZbs{}t}\PYG{l+s}{StemCount}\PYG{l+s+se}{\PYGZbs{}t}\PYG{l+s}{ProgenitorCount}\PYG{l+s+se}{\PYGZbs{}t}\PYG{l+s}{PostMitoticCount}\PYG{l+s+se}{\PYGZbs{}n}\PYG{l+s}{\PYGZdq{}}\PYG{p}{;}

\PYG{c+c1}{//Instance RNG}
    \PYG{n}{RandomNumberGenerator}\PYG{o}{*} \PYG{n}{p\PYGZus{}RNG} \PYG{o}{=} \PYG{n}{RandomNumberGenerator}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{();}

\PYG{c+c1}{//Initialise pointers to relevant singleton ProliferativeTypes and Properties}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}state}\PYG{p}{(}\PYG{n}{CellPropertyRegistry}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{()}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{Get}\PYG{o}{\PYGZlt{}}\PYG{n}{WildTypeCellMutationState}\PYG{o}{\PYGZgt{}}\PYG{p}{());}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}Stem}\PYG{p}{(}\PYG{n}{CellPropertyRegistry}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{()}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{Get}\PYG{o}{\PYGZlt{}}\PYG{n}{StemCellProliferativeType}\PYG{o}{\PYGZgt{}}\PYG{p}{());}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}Transit}\PYG{p}{(}\PYG{n}{CellPropertyRegistry}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{()}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{Get}\PYG{o}{\PYGZlt{}}\PYG{n}{TransitCellProliferativeType}\PYG{o}{\PYGZgt{}}\PYG{p}{());}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}PostMitotic}\PYG{p}{(}\PYG{n}{CellPropertyRegistry}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{()}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{Get}\PYG{o}{\PYGZlt{}}\PYG{n}{DifferentiatedCellProliferativeType}\PYG{o}{\PYGZgt{}}\PYG{p}{());}

    \PYG{c+cm}{/************************}
\PYG{c+cm}{     * SIMULATOR SETUP \PYGZam{} RUN}
\PYG{c+cm}{     ************************/}

    \PYG{c+c1}{//initialise SimulationTime (permits cellcyclemodel setup)}
    \PYG{n}{SimulationTime}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{()}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{SetStartTime}\PYG{p}{(}\PYG{l+m+mf}{0.0}\PYG{p}{);}

    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{CellPtr}\PYG{o}{\PYGZgt{}} \PYG{n}{cells}\PYG{p}{;}


    \PYG{n}{WanStemCellCycleModel}\PYG{o}{*} \PYG{n}{p\PYGZus{}stem\PYGZus{}model} \PYG{o}{=} \PYG{k}{new} \PYG{n}{WanStemCellCycleModel}\PYG{p}{;}

    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{ColumnDataWriter}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}debugWriter}\PYG{p}{(}
            \PYG{k}{new} \PYG{n}{ColumnDataWriter}\PYG{p}{(}\PYG{n}{directoryString}\PYG{p}{,} \PYG{n}{filenameString} \PYG{o}{+} \PYG{l+s}{\PYGZdq{}DEBUG\PYGZus{}WAN\PYGZdq{}}\PYG{p}{,} \PYG{n+nb}{false}\PYG{p}{,} \PYG{l+m+mi}{10}\PYG{p}{));}

    \PYG{n}{p\PYGZus{}stem\PYGZus{}model}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{SetDimension}\PYG{p}{(}\PYG{l+m+mi}{2}\PYG{p}{);}
    \PYG{n}{p\PYGZus{}stem\PYGZus{}model}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{EnableModelDebugOutput}\PYG{p}{(}\PYG{n}{p\PYGZus{}debugWriter}\PYG{p}{);}
    \PYG{n}{CellPtr} \PYG{n}{p\PYGZus{}cell}\PYG{p}{(}\PYG{k}{new} \PYG{n}{Cell}\PYG{p}{(}\PYG{n}{p\PYGZus{}state}\PYG{p}{,} \PYG{n}{p\PYGZus{}stem\PYGZus{}model}\PYG{p}{));}
    \PYG{n}{p\PYGZus{}cell}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{InitialiseCellCycleModel}\PYG{p}{();}
    \PYG{n}{cells}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{p\PYGZus{}cell}\PYG{p}{);}

    \PYG{c+c1}{//Generate 1x\PYGZsh{}cells mesh for abstract colony}
    \PYG{n}{HoneycombMeshGenerator} \PYG{n}{generator}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{,} \PYG{l+m+mi}{1}\PYG{p}{);}
    \PYG{n}{MutableMesh}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{p}{,} \PYG{l+m+mi}{2}\PYG{o}{\PYGZgt{}*} \PYG{n}{p\PYGZus{}generating\PYGZus{}mesh} \PYG{o}{=} \PYG{n}{generator}\PYG{p}{.}\PYG{n}{GetMesh}\PYG{p}{();}
    \PYG{n}{NodesOnlyMesh}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{o}{\PYGZgt{}} \PYG{n}{mesh}\PYG{p}{;}
    \PYG{n}{mesh}\PYG{p}{.}\PYG{n}{ConstructNodesWithoutMesh}\PYG{p}{(}\PYG{o}{*}\PYG{n}{p\PYGZus{}generating\PYGZus{}mesh}\PYG{p}{,} \PYG{l+m+mf}{1.5}\PYG{p}{);}

    \PYG{c+c1}{//Setup cell population}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{NodeBasedCellPopulation}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{cell\PYGZus{}population}\PYG{p}{(}\PYG{k}{new} \PYG{n}{NodeBasedCellPopulation}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{o}{\PYGZgt{}}\PYG{p}{(}\PYG{n}{mesh}\PYG{p}{,} \PYG{n}{cells}\PYG{p}{));}
    \PYG{n}{cell\PYGZus{}population}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{AddCellPopulationCountWriter}\PYG{o}{\PYGZlt{}}\PYG{n}{CellProliferativeTypesCountWriter}\PYG{o}{\PYGZgt{}}\PYG{p}{();}

    \PYG{n}{p\PYGZus{}stem\PYGZus{}model}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{EnableExpandingStemPopulation}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{,} \PYG{n}{cell\PYGZus{}population}\PYG{p}{);}

    \PYG{c+c1}{//Setup simulator \PYGZam{} run simulation}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{OffLatticeSimulation}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{p\PYGZus{}simulator}\PYG{p}{(}
            \PYG{k}{new} \PYG{n}{OffLatticeSimulation}\PYG{o}{\PYGZlt{}}\PYG{l+m+mi}{2}\PYG{o}{\PYGZgt{}}\PYG{p}{(}\PYG{o}{*}\PYG{n}{cell\PYGZus{}population}\PYG{p}{));}
    \PYG{n}{p\PYGZus{}simulator}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{SetDt}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{);}
    \PYG{n}{p\PYGZus{}simulator}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{SetOutputDirectory}\PYG{p}{(}\PYG{n}{directoryString} \PYG{o}{+} \PYG{l+s}{\PYGZdq{}/WanDebug\PYGZdq{}}\PYG{p}{);}
    \PYG{n}{p\PYGZus{}simulator}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{SetEndTime}\PYG{p}{(}\PYG{l+m+mi}{100}\PYG{p}{);}
    \PYG{n}{p\PYGZus{}simulator}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{Solve}\PYG{p}{();}

    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{unsigned}\PYG{o}{\PYGZgt{}} \PYG{n}{prolTypes} \PYG{o}{=} \PYG{n}{cell\PYGZus{}population}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{GetCellProliferativeTypeCount}\PYG{p}{();}
    \PYG{k+kt}{unsigned} \PYG{n}{realCells} \PYG{o}{=} \PYG{n}{cell\PYGZus{}population}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{GetNumRealCells}\PYG{p}{();}
    \PYG{k+kt}{unsigned} \PYG{n}{allCells} \PYG{o}{=} \PYG{n}{cell\PYGZus{}population}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{GetNumAllCells}\PYG{p}{();}

    \PYG{n}{Timer}\PYG{o}{::}\PYG{n}{Print}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}stem: \PYGZdq{}} \PYG{o}{+} \PYG{n}{std}\PYG{o}{::}\PYG{n}{to\PYGZus{}string}\PYG{p}{(}\PYG{n}{prolTypes}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{])} \PYG{o}{+} \PYG{l+s}{\PYGZdq{} transit: \PYGZdq{}} \PYG{o}{+} \PYG{n}{std}\PYG{o}{::}\PYG{n}{to\PYGZus{}string}\PYG{p}{(}\PYG{n}{prolTypes}\PYG{p}{[}\PYG{l+m+mi}{1}\PYG{p}{])} \PYG{o}{+} \PYG{l+s}{\PYGZdq{} postmitotic: \PYGZdq{}} \PYG{o}{+} \PYG{n}{std}\PYG{o}{::}\PYG{n}{to\PYGZus{}string}\PYG{p}{(}\PYG{n}{prolTypes}\PYG{p}{[}\PYG{l+m+mi}{2}\PYG{p}{]));}
    \PYG{n}{Timer}\PYG{o}{::}\PYG{n}{Print}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}realcells: \PYGZdq{}} \PYG{o}{+} \PYG{n}{std}\PYG{o}{::}\PYG{n}{to\PYGZus{}string}\PYG{p}{(}\PYG{n}{realCells}\PYG{p}{)} \PYG{o}{+} \PYG{l+s}{\PYGZdq{} allcells: \PYGZdq{}} \PYG{o}{+} \PYG{n}{std}\PYG{o}{::}\PYG{n}{to\PYGZus{}string}\PYG{p}{(}\PYG{n}{allCells}\PYG{p}{));}

    \PYG{c+c1}{//Reset for next simulation}
    \PYG{n}{SimulationTime}\PYG{o}{::}\PYG{n}{Destroy}\PYG{p}{();}
    \PYG{n}{cell\PYGZus{}population}\PYG{p}{.}\PYG{n}{reset}\PYG{p}{();}

    \PYG{n}{p\PYGZus{}RNG}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{Destroy}\PYG{p}{();}
    \PYG{n}{LogFile}\PYG{o}{::}\PYG{n}{Close}\PYG{p}{();}

    \PYG{k}{return} \PYG{n}{exit\PYGZus{}code}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\PYG{p}{;}
\end{Verbatim}
