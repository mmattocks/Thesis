\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8}]
\PYG{c+cp}{\PYGZsh{}ifndef GOMESCELLCYCLEMODEL\PYGZus{}HPP\PYGZus{}}
\PYG{c+cp}{\PYGZsh{}define GOMESCELLCYCLEMODEL\PYGZus{}HPP\PYGZus{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}AbstractSimpleCellCycleModel.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}RandomNumberGenerator.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}Cell.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}DifferentiatedCellProliferativeType.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}GomesRetinalNeuralFates.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}SmartPointers.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}ColumnDataWriter.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}LogFile.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}CellLabel.hpp\PYGZdq{}}

\PYG{c+cm}{/*******************************************}
\PYG{c+cm}{ * GOMES CELL CYCLE MODEL}
\PYG{c+cm}{ * As described in Gomes et al. 2011 [Gomes2011] doi: 10.1242/dev.059683}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * USE: By default, GomesCellCycleModels are constructed with the parameter fit reported in [Gomes2011].}
\PYG{c+cm}{ * Cell cycle length, mitotic mode, and postmitotic fate of cells are determined by independent random variables}
\PYG{c+cm}{ * PP = symmetric proliferative mitotic mode, both progeny remain mitotic}
\PYG{c+cm}{ * PD = asymmetric proliferative mitotic mode, one progeny exits the cell cycle and differentiates}
\PYG{c+cm}{ * DD = symmetric differentiative mitotic mode, both progeny exit the cell cycle and differentiate}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * Change default model parameters with SetModelParameters(\PYGZlt{}params\PYGZgt{});}
\PYG{c+cm}{ * Set AbstractCellProperties for differentiated neural types with SetModelProperties();}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * 2 per\PYGZhy{}model\PYGZhy{}event output modes:}
\PYG{c+cm}{ * EnableModeEventOutput() enables mitotic mode event logging\PYGZhy{}all cells will write to the singleton log file}
\PYG{c+cm}{ * EnableModelDebugOutput() enables more detailed debug output, each seed will have its own file written to}
\PYG{c+cm}{ * by a ColumnDataWriter passed to it from the test}
\PYG{c+cm}{ * (eg. by the SetupDebugOutput helper function in the project simulator)}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * 1 mitotic\PYGZhy{}event\PYGZhy{}sequence sampler (only samples one \PYGZdq{}path\PYGZdq{} through the lineage):}
\PYG{c+cm}{ * EnableSequenceSampler() \PYGZhy{} one \PYGZdq{}sequence\PYGZdq{} of progenitors writes mitotic event type to a string in the singleton log file}
\PYG{c+cm}{ *}
\PYG{c+cm}{ **********************************************/}

\PYG{k}{class} \PYG{n+nc}{GomesCellCycleModel} \PYG{o}{:} \PYG{k}{public} \PYG{n}{AbstractSimpleCellCycleModel}
\PYG{p}{\PYGZob{}}
    \PYG{k}{friend} \PYG{k}{class} \PYG{n+nc}{TestSimpleCellCycleModels}\PYG{p}{;}

\PYG{k}{private}\PYG{o}{:}

    \PYG{c+cm}{/** Needed for serialization. */}
    \PYG{k}{friend} \PYG{k}{class} \PYG{n+nc}{boost}\PYG{o}{::}\PYG{n}{serialization}\PYG{o}{::}\PYG{n}{access}\PYG{p}{;}
    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Archive the cell\PYGZhy{}cycle model and random number generator, never used directly \PYGZhy{} boost uses this.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param archive the archive}
\PYG{c+cm}{     * @param version the current version of this class}
\PYG{c+cm}{     */}
    \PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k}{class} \PYG{n+nc}{Archive}\PYG{o}{\PYGZgt{}}
    \PYG{k+kt}{void} \PYG{n}{serialize}\PYG{p}{(}\PYG{n}{Archive} \PYG{o}{\PYGZam{}} \PYG{n}{archive}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{unsigned} \PYG{k+kt}{int} \PYG{n}{version}\PYG{p}{)}
    \PYG{p}{\PYGZob{}}
        \PYG{n}{archive} \PYG{o}{\PYGZam{}} \PYG{n}{boost}\PYG{o}{::}\PYG{n}{serialization}\PYG{o}{::}\PYG{n}{base\PYGZus{}object}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractSimpleCellCycleModel}\PYG{o}{\PYGZgt{}}\PYG{p}{(}\PYG{o}{*}\PYG{k}{this}\PYG{p}{);}

        \PYG{n}{SerializableSingleton}\PYG{o}{\PYGZlt{}}\PYG{n}{RandomNumberGenerator}\PYG{o}{\PYGZgt{}*} \PYG{n}{p\PYGZus{}wrapper} \PYG{o}{=}
                \PYG{n}{RandomNumberGenerator}\PYG{o}{::}\PYG{n}{Instance}\PYG{p}{()}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{GetSerializationWrapper}\PYG{p}{();}
        \PYG{n}{archive} \PYG{o}{\PYGZam{}} \PYG{n}{p\PYGZus{}wrapper}\PYG{p}{;}
        \PYG{n}{archive} \PYG{o}{\PYGZam{}} \PYG{n}{mCellCycleDuration}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{//Private write functions for models}
    \PYG{k+kt}{void} \PYG{n}{WriteModeEventOutput}\PYG{p}{();}
    \PYG{k+kt}{void} \PYG{n+nf}{WriteDebugData}\PYG{p}{(}\PYG{k+kt}{double} \PYG{n}{percentile}\PYG{p}{);}

\PYG{k}{protected}\PYG{o}{:}
    \PYG{c+c1}{//mode/output variables}
    \PYG{k+kt}{bool} \PYG{n}{mOutput}\PYG{p}{;}
    \PYG{k+kt}{double} \PYG{n}{mEventStartTime}\PYG{p}{;}
    \PYG{k+kt}{bool} \PYG{n}{mSequenceSampler}\PYG{p}{;}
    \PYG{k+kt}{bool} \PYG{n}{mSeqSamplerLabelSister}\PYG{p}{;}
    \PYG{c+c1}{//debug writer stuff}
    \PYG{k+kt}{bool} \PYG{n}{mDebug}\PYG{p}{;}
    \PYG{k+kt}{int} \PYG{n}{mTimeID}\PYG{p}{;}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{int}\PYG{o}{\PYGZgt{}} \PYG{n}{mVarIDs}\PYG{p}{;}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{ColumnDataWriter}\PYG{o}{\PYGZgt{}} \PYG{n}{mDebugWriter}\PYG{p}{;}
    \PYG{c+c1}{//model parameters and state memory vars}
    \PYG{k+kt}{double} \PYG{n}{mNormalMu}\PYG{p}{;}
    \PYG{k+kt}{double} \PYG{n}{mNormalSigma}\PYG{p}{;}
    \PYG{k+kt}{double} \PYG{n}{mPP}\PYG{p}{;}
    \PYG{k+kt}{double} \PYG{n}{mPD}\PYG{p}{;}
    \PYG{k+kt}{double} \PYG{n}{mpBC}\PYG{p}{;}
    \PYG{k+kt}{double} \PYG{n}{mpAC}\PYG{p}{;}
    \PYG{k+kt}{double} \PYG{n}{mpMG}\PYG{p}{;}
    \PYG{k+kt}{unsigned} \PYG{n}{mMitoticMode}\PYG{p}{;}
    \PYG{k+kt}{unsigned} \PYG{n}{mSeed}\PYG{p}{;}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{mp\PYGZus{}PostMitoticType}\PYG{p}{;}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{mp\PYGZus{}RPh\PYGZus{}Type}\PYG{p}{;}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{mp\PYGZus{}BC\PYGZus{}Type}\PYG{p}{;}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{mp\PYGZus{}AC\PYGZus{}Type}\PYG{p}{;}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{mp\PYGZus{}MG\PYGZus{}Type}\PYG{p}{;}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{mp\PYGZus{}label\PYGZus{}Type}\PYG{p}{;}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Protected copy\PYGZhy{}constructor for use by CreateCellCycleModel().}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * The only way for external code to create a copy of a cell cycle model}
\PYG{c+cm}{     * is by calling that method, to ensure that a model of the correct subclass is created.}
\PYG{c+cm}{     * This copy\PYGZhy{}constructor helps subclasses to ensure that all member variables are correctly copied when this happens.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * This method is called by child classes to set member variables for a daughter cell upon cell division.}
\PYG{c+cm}{     * Note that the parent cell cycle model will have had ResetForDivision() called just before CreateCellCycleModel() is called,}
\PYG{c+cm}{     * so performing an exact copy of the parent is suitable behaviour. Any daughter\PYGZhy{}cell\PYGZhy{}specific initialisation}
\PYG{c+cm}{     * can be done in InitialiseDaughterCell().}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param rModel the cell cycle model to copy.}
\PYG{c+cm}{     */}
    \PYG{n}{GomesCellCycleModel}\PYG{p}{(}\PYG{k}{const} \PYG{n}{GomesCellCycleModel}\PYG{o}{\PYGZam{}} \PYG{n}{rModel}\PYG{p}{);}

\PYG{k}{public}\PYG{o}{:}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Constructor \PYGZhy{} just a default, mBirthTime is set in the AbstractCellCycleModel class.}
\PYG{c+cm}{     */}
    \PYG{n}{GomesCellCycleModel}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * SetCellCycleDuration() method to set length of cell cycle (lognormal distribution as specified in [Gomes2011])}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{SetCellCycleDuration}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden builder method to create new copies of}
\PYG{c+cm}{     * this cell\PYGZhy{}cycle model.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @return new cell\PYGZhy{}cycle model}
\PYG{c+cm}{     */}
    \PYG{n}{AbstractCellCycleModel}\PYG{o}{*} \PYG{n+nf}{CreateCellCycleModel}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden ResetForDivision() method.}
\PYG{c+cm}{     * Contains general mitotic mode logic}
\PYG{c+cm}{     **/}
    \PYG{k+kt}{void} \PYG{n+nf}{ResetForDivision}\PYG{p}{();}

    \PYG{c+cm}{/** Overridden InitialiseDaughterCell() method. Used to implement asymmetric mitotic mode*/}
    \PYG{k+kt}{void} \PYG{n+nf}{InitialiseDaughterCell}\PYG{p}{();}

    \PYG{c+cm}{/* Model setup functions}
\PYG{c+cm}{     * Set lognormal cell cycle curve properties with *mean and std of corresponding NORMAL curve*}
\PYG{c+cm}{     * Model requires valid AbstractCellProperties to assign postmitotic fate;}
\PYG{c+cm}{     * Defaults are found in GomesRetinalNeuralFates.hpp}
\PYG{c+cm}{     * (RodPohotreceptor, AmacrineCell, BipolarCell, MullerGlia)}
\PYG{c+cm}{     */}

    \PYG{k+kt}{void} \PYG{n+nf}{SetModelParameters}\PYG{p}{(}\PYG{k}{const} \PYG{k+kt}{double} \PYG{n}{normalMu} \PYG{o}{=} \PYG{l+m+mf}{3.9716}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{double} \PYG{n}{normalSigma} \PYG{o}{=} \PYG{l+m+mf}{.32839}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{double} \PYG{n}{PP} \PYG{o}{=} \PYG{l+m+mf}{.055}\PYG{p}{,}
                            \PYG{k}{const} \PYG{k+kt}{double} \PYG{n}{PD} \PYG{o}{=} \PYG{l+m+mf}{.221}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{double} \PYG{n}{pBC} \PYG{o}{=} \PYG{l+m+mf}{.128}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{double} \PYG{n}{pAC} \PYG{o}{=} \PYG{l+m+mf}{.106}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{double} \PYG{n}{pMG} \PYG{o}{=}
                                    \PYG{l+m+mf}{.028}\PYG{p}{);}
    \PYG{k+kt}{void} \PYG{n+nf}{SetModelProperties}\PYG{p}{(}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}RPh\PYGZus{}Type}\PYG{p}{,}
                            \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}AC\PYGZus{}Type}\PYG{p}{,}
                            \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}BC\PYGZus{}Type}\PYG{p}{,}
                            \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}MG\PYGZus{}Type}\PYG{p}{);}

    \PYG{c+c1}{//This should normally be a DifferentiatedCellProliferativeType}
    \PYG{k+kt}{void} \PYG{n+nf}{SetPostMitoticType}\PYG{p}{(}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}PostMitoticType}\PYG{p}{);}

    \PYG{c+c1}{//Functions to enable per\PYGZhy{}cell mitotic mode logging for mode rate \PYGZam{} sequence sampling fixtures}
    \PYG{c+c1}{//Uses singleton logfile}
    \PYG{k+kt}{void} \PYG{n+nf}{EnableModeEventOutput}\PYG{p}{(}\PYG{k+kt}{double} \PYG{n}{eventStart}\PYG{p}{,} \PYG{k+kt}{unsigned} \PYG{n}{seed}\PYG{p}{);}
    \PYG{k+kt}{void} \PYG{n+nf}{EnableSequenceSampler}\PYG{p}{(}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{label}\PYG{p}{);}

    \PYG{c+c1}{//More detailed debug output. Needs a ColumnDataWriter passed to it}
    \PYG{c+c1}{//Only declare ColumnDataWriter directory, filename, etc; do not set up otherwise}
    \PYG{k+kt}{void} \PYG{n+nf}{EnableModelDebugOutput}\PYG{p}{(}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{ColumnDataWriter}\PYG{o}{\PYGZgt{}} \PYG{n}{debugWriter}\PYG{p}{);}

    \PYG{c+c1}{//Not used, but must be overwritten lest GomesCellCycleModels be abstract}
    \PYG{k+kt}{double} \PYG{n+nf}{GetAverageTransitCellCycleTime}\PYG{p}{();}
    \PYG{k+kt}{double} \PYG{n+nf}{GetAverageStemCellCycleTime}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden OutputCellCycleModelParameters() method.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param rParamsFile the file stream to which the parameters are output}
\PYG{c+cm}{     */}
    \PYG{k}{virtual} \PYG{k+kt}{void} \PYG{n+nf}{OutputCellCycleModelParameters}\PYG{p}{(}\PYG{n}{out\PYGZus{}stream}\PYG{o}{\PYGZam{}} \PYG{n}{rParamsFile}\PYG{p}{);}
\PYG{p}{\PYGZcb{};}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}SerializationExportWrapper.hpp\PYGZdq{}}
\PYG{c+c1}{// Declare identifier for the serializer}
\PYG{n}{CHASTE\PYGZus{}CLASS\PYGZus{}EXPORT}\PYG{p}{(}\PYG{n}{GomesCellCycleModel}\PYG{p}{)}

\PYG{c+cp}{\PYGZsh{}endif }\PYG{c+cm}{/*GOMESCELLCYCLEMODEL\PYGZus{}HPP\PYGZus{}*/}
\end{Verbatim}
