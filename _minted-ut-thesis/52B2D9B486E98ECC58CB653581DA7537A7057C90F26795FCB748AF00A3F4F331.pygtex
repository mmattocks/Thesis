\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8}]
\PYG{c+cp}{\PYGZsh{}ifndef OFFLATTICESIMULATIONPROPERTYSTOP\PYGZus{}HPP\PYGZus{}}
\PYG{c+cp}{\PYGZsh{}define OFFLATTICESIMULATIONPROPERTYSTOP\PYGZus{}HPP\PYGZus{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}AbstractCellBasedSimulation.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}AbstractForce.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}AbstractCellPopulationBoundaryCondition.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}AbstractNumericalMethod.hpp\PYGZdq{}}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}ChasteSerialization.hpp\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}boost/serialization/base\PYGZus{}object.hpp\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}boost/serialization/set.hpp\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZlt{}boost/serialization/vector.hpp\PYGZgt{}}

\PYG{c+cm}{/**}
\PYG{c+cm}{ * Run an off\PYGZhy{}lattice 2D or 3D cell\PYGZhy{}based simulation using an off\PYGZhy{}lattice}
\PYG{c+cm}{ * cell population.}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * In cell\PYGZhy{}centre\PYGZhy{}based cell populations, each cell is represented by a}
\PYG{c+cm}{ * single node (corresponding to its centre), and connectivity is defined}
\PYG{c+cm}{ * either by a Delaunay triangulation or a radius of influence. In vertex\PYGZhy{}}
\PYG{c+cm}{ * based cell populations, each cell is represented by a polytope}
\PYG{c+cm}{ * (corresponding to its membrane) with a variable number of vertices.}
\PYG{c+cm}{ * Alternative cell populations may be defined by the user.}
\PYG{c+cm}{ *}
\PYG{c+cm}{ * The OffLatticeSimulation is constructed with a CellPopulation, which}
\PYG{c+cm}{ * updates the correspondence between each Cell and its spatial representation}
\PYG{c+cm}{ * and handles cell division (governed by the CellCycleModel associated}
\PYG{c+cm}{ * with each cell). Once constructed, one or more Force laws may be passed}
\PYG{c+cm}{ * to the OffLatticeSimulation object, to define the mechanical properties}
\PYG{c+cm}{ * of the CellPopulation. Similarly, one or more CellKillers may be passed}
\PYG{c+cm}{ * to the OffLatticeSimulation object to specify conditions in which Cells}
\PYG{c+cm}{ * may die, and one or more CellPopulationBoundaryConditions to specify}
\PYG{c+cm}{ * regions in space beyond which Cells may not move.}
\PYG{c+cm}{ */}
\PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{unsigned} \PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{k+kt}{unsigned} \PYG{n}{SPACE\PYGZus{}DIM} \PYG{o}{=} \PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{o}{\PYGZgt{}}
\PYG{k}{class} \PYG{n+nc}{OffLatticeSimulationPropertyStop} \PYG{o}{:} \PYG{k}{public} \PYG{n}{AbstractCellBasedSimulation}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}}
\PYG{p}{\PYGZob{}}
\PYG{k}{private}\PYG{o}{:}

    \PYG{c+cm}{/** Needed for serialization. */}
    \PYG{k}{friend} \PYG{k}{class} \PYG{n+nc}{boost}\PYG{o}{::}\PYG{n}{serialization}\PYG{o}{::}\PYG{n}{access}\PYG{p}{;}
    \PYG{k}{friend} \PYG{k}{class} \PYG{n+nc}{TestOffLatticeSimulation}\PYG{p}{;}
    \PYG{k}{friend} \PYG{k}{class} \PYG{n+nc}{TestOffLatticeSimulationWithNodeBasedCellPopulation}\PYG{p}{;}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Save or restore the simulation.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param archive the archive}
\PYG{c+cm}{     * @param version the current version of this class}
\PYG{c+cm}{     */}
    \PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k}{class} \PYG{n+nc}{Archive}\PYG{o}{\PYGZgt{}}
    \PYG{k+kt}{void} \PYG{n}{serialize}\PYG{p}{(}\PYG{n}{Archive} \PYG{o}{\PYGZam{}} \PYG{n}{archive}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{unsigned} \PYG{k+kt}{int} \PYG{n}{version}\PYG{p}{)}
    \PYG{p}{\PYGZob{}}
        \PYG{n}{archive} \PYG{o}{\PYGZam{}} \PYG{n}{boost}\PYG{o}{::}\PYG{n}{serialization}\PYG{o}{::}\PYG{n}{base\PYGZus{}object}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellBasedSimulation}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}}\PYG{p}{(}\PYG{o}{*}\PYG{k}{this}\PYG{p}{);}
        \PYG{n}{archive} \PYG{o}{\PYGZam{}} \PYG{n}{mForceCollection}\PYG{p}{;}
        \PYG{n}{archive} \PYG{o}{\PYGZam{}} \PYG{n}{mBoundaryConditions}\PYG{p}{;}
        \PYG{n}{archive} \PYG{o}{\PYGZam{}} \PYG{n}{mpNumericalMethod}\PYG{p}{;}
    \PYG{p}{\PYGZcb{}}

\PYG{k}{protected}\PYG{o}{:}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{p\PYGZus{}property}\PYG{p}{;}
    \PYG{c+cm}{/** The mechanics used to determine the new location of the cells, a list of the forces. */}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractForce}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{mForceCollection}\PYG{p}{;}

    \PYG{c+cm}{/** List of boundary conditions. */}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellPopulationBoundaryCondition}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{mBoundaryConditions}\PYG{p}{;}

    \PYG{c+cm}{/** The numerical method to use in this simulation. Defaults to the explicit forward Euler method. */}
    \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractNumericalMethod}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{mpNumericalMethod}\PYG{p}{;}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden UpdateCellLocationsAndTopology() method.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * Calculate forces and update node positions.}
\PYG{c+cm}{     */}
    \PYG{k}{virtual} \PYG{k+kt}{void} \PYG{n+nf}{UpdateCellLocationsAndTopology}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Sends nodes back to the positions given in the input map. Used after a failed step}
\PYG{c+cm}{     * when adaptivity is turned on.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param oldNodeLoctions A map linking nodes to their old positions.}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{RevertToOldLocations}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{map}\PYG{o}{\PYGZlt{}}\PYG{n}{Node}\PYG{o}{\PYGZlt{}}\PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}*}\PYG{p}{,} \PYG{n}{c\PYGZus{}vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{double}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{oldNodeLoctions}\PYG{p}{);}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Applies any boundary conditions.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param oldNodeLoctions Mapping between node indices and old node locations}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{ApplyBoundaries}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{map}\PYG{o}{\PYGZlt{}}\PYG{n}{Node}\PYG{o}{\PYGZlt{}}\PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}*}\PYG{p}{,} \PYG{n}{c\PYGZus{}vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{double}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{oldNodeLoctions}\PYG{p}{);}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden SetupSolve() method to clear the forces applied to the nodes.}
\PYG{c+cm}{     */}
    \PYG{k}{virtual} \PYG{k+kt}{void} \PYG{n+nf}{SetupSolve}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden WriteVisualizerSetupFile() method.}
\PYG{c+cm}{     */}
    \PYG{k}{virtual} \PYG{k+kt}{void} \PYG{n+nf}{WriteVisualizerSetupFile}\PYG{p}{();}

    \PYG{k+kt}{bool} \PYG{n+nf}{StoppingEventHasOccurred}\PYG{p}{();}

\PYG{k}{public}\PYG{o}{:}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Constructor.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param rCellPopulation Reference to a cell population object}
\PYG{c+cm}{     * @param deleteCellPopulationInDestructor Whether to delete the cell population on destruction to}
\PYG{c+cm}{     *     free up memory (defaults to false)}
\PYG{c+cm}{     * @param initialiseCells Whether to initialise cells (defaults to true, set to false when loading}
\PYG{c+cm}{     *     from an archive)}
\PYG{c+cm}{     */}
    \PYG{n}{OffLatticeSimulationPropertyStop}\PYG{p}{(}\PYG{n}{AbstractCellPopulation}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}\PYGZam{}} \PYG{n}{rCellPopulation}\PYG{p}{,}
                                     \PYG{k+kt}{bool} \PYG{n}{deleteCellPopulationInDestructor} \PYG{o}{=} \PYG{n+nb}{false}\PYG{p}{,} \PYG{k+kt}{bool} \PYG{n}{initialiseCells} \PYG{o}{=} \PYG{n+nb}{true}\PYG{p}{);}

    \PYG{k+kt}{void} \PYG{n+nf}{SetStopProperty}\PYG{p}{(}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellProperty}\PYG{o}{\PYGZgt{}} \PYG{n}{stopPropertySetting}\PYG{p}{);}

    \PYG{k+kt}{bool} \PYG{n+nf}{HasStoppingEventOccurred}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Add a force to be used in this simulation (use this to set the mechanics system).}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param pForce pointer to a force law}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{AddForce}\PYG{p}{(}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractForce}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{pForce}\PYG{p}{);}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Remove all the forces.}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{RemoveAllForces}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Add a cell population boundary condition to be used in this simulation.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param pBoundaryCondition pointer to a boundary condition}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{AddCellPopulationBoundaryCondition}\PYG{p}{(}
            \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractCellPopulationBoundaryCondition}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{pBoundaryCondition}\PYG{p}{);}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Method to remove all the cell population boundary conditions}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{RemoveAllCellPopulationBoundaryConditions}\PYG{p}{();}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Set the numerical method to be used in this simulation (use this to solve the mechanics system).}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param pNumericalMethod pointer to a numerical method object}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{SetNumericalMethod}\PYG{p}{(}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractNumericalMethod}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{pNumericalMethod}\PYG{p}{);}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * @return the current numerical method.}
\PYG{c+cm}{     */}
    \PYG{k}{const} \PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractNumericalMethod}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{n}{GetNumericalMethod}\PYG{p}{()} \PYG{k}{const}\PYG{p}{;}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden OutputAdditionalSimulationSetup() method.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * Output any force, boundary condition or numerical method information.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param rParamsFile the file stream to which the parameters are output}
\PYG{c+cm}{     */}
    \PYG{k+kt}{void} \PYG{n+nf}{OutputAdditionalSimulationSetup}\PYG{p}{(}\PYG{n}{out\PYGZus{}stream}\PYG{o}{\PYGZam{}} \PYG{n}{rParamsFile}\PYG{p}{);}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Overridden OutputSimulationParameters() method.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @param rParamsFile the file stream to which the parameters are output}
\PYG{c+cm}{     */}
    \PYG{k}{virtual} \PYG{k+kt}{void} \PYG{n+nf}{OutputSimulationParameters}\PYG{p}{(}\PYG{n}{out\PYGZus{}stream}\PYG{o}{\PYGZam{}} \PYG{n}{rParamsFile}\PYG{p}{);}

    \PYG{c+cm}{/**}
\PYG{c+cm}{     * Directly access the forces attached to this simulation, to allow their manipulation after archiving.}
\PYG{c+cm}{     *}
\PYG{c+cm}{     * @return mForceCollection the vector of pointers to forces attached to this simulation}
\PYG{c+cm}{     */}
    \PYG{k}{const} \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{n}{boost}\PYG{o}{::}\PYG{n}{shared\PYGZus{}ptr}\PYG{o}{\PYGZlt{}}\PYG{n}{AbstractForce}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}} \PYG{o}{\PYGZgt{}\PYGZam{}} \PYG{n}{rGetForceCollection}\PYG{p}{()} \PYG{k}{const}\PYG{p}{;}
\PYG{p}{\PYGZcb{};}

\PYG{c+c1}{// Serialization for Boost \PYGZgt{}= 1.36}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}SerializationExportWrapper.hpp\PYGZdq{}}
\PYG{n}{EXPORT\PYGZus{}TEMPLATE\PYGZus{}CLASS\PYGZus{}ALL\PYGZus{}DIMS}\PYG{p}{(}\PYG{n}{OffLatticeSimulationPropertyStop}\PYG{p}{)}

\PYG{k}{namespace} \PYG{n}{boost}
\PYG{p}{\PYGZob{}}
\PYG{k}{namespace} \PYG{n}{serialization}
\PYG{p}{\PYGZob{}}
\PYG{c+cm}{/**}
\PYG{c+cm}{ * Serialize information required to construct an OffLatticeSimulation.}
\PYG{c+cm}{ */}
\PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k}{class} \PYG{n+nc}{Archive}\PYG{p}{,} \PYG{k+kt}{unsigned} \PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{k+kt}{unsigned} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}}
\PYG{k+kr}{inline} \PYG{k+kt}{void} \PYG{n}{save\PYGZus{}construct\PYGZus{}data}\PYG{p}{(}\PYG{n}{Archive} \PYG{o}{\PYGZam{}} \PYG{n}{ar}\PYG{p}{,} \PYG{k}{const} \PYG{n}{OffLatticeSimulationPropertyStop}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{*} \PYG{n}{t}\PYG{p}{,}
                                \PYG{k}{const} \PYG{k+kt}{unsigned} \PYG{k+kt}{int} \PYG{n}{file\PYGZus{}version}\PYG{p}{)}
\PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// Save data required to construct instance}
    \PYG{k}{const} \PYG{n}{AbstractCellPopulation}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}*} \PYG{n}{p\PYGZus{}cell\PYGZus{}population} \PYG{o}{=} \PYG{o}{\PYGZam{}}\PYG{p}{(}\PYG{n}{t}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{rGetCellPopulation}\PYG{p}{());}
    \PYG{n}{ar} \PYG{o}{\PYGZam{}} \PYG{n}{p\PYGZus{}cell\PYGZus{}population}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/**}
\PYG{c+cm}{ * De\PYGZhy{}serialize constructor parameters and initialise an OffLatticeSimulation.}
\PYG{c+cm}{ */}
\PYG{k}{template}\PYG{o}{\PYGZlt{}}\PYG{k}{class} \PYG{n+nc}{Archive}\PYG{p}{,} \PYG{k+kt}{unsigned} \PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{k+kt}{unsigned} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}}
\PYG{k+kr}{inline} \PYG{k+kt}{void} \PYG{n}{load\PYGZus{}construct\PYGZus{}data}\PYG{p}{(}\PYG{n}{Archive} \PYG{o}{\PYGZam{}} \PYG{n}{ar}\PYG{p}{,} \PYG{n}{OffLatticeSimulationPropertyStop}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}} \PYG{o}{*} \PYG{n}{t}\PYG{p}{,}
                                \PYG{k}{const} \PYG{k+kt}{unsigned} \PYG{k+kt}{int} \PYG{n}{file\PYGZus{}version}\PYG{p}{)}
\PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// Retrieve data from archive required to construct new instance}
    \PYG{n}{AbstractCellPopulation}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}*} \PYG{n}{p\PYGZus{}cell\PYGZus{}population}\PYG{p}{;}
    \PYG{n}{ar} \PYG{o}{\PYGZgt{}\PYGZgt{}} \PYG{n}{p\PYGZus{}cell\PYGZus{}population}\PYG{p}{;}

    \PYG{c+c1}{// Invoke inplace constructor to initialise instance, middle two variables set extra}
    \PYG{c+c1}{// member variables to be deleted as they are loaded from archive and to not initialise cells.}
    \PYG{o}{::}\PYG{k}{new} \PYG{p}{(}\PYG{n}{t}\PYG{p}{)} \PYG{n}{OffLatticeSimulationPropertyStop}\PYG{o}{\PYGZlt{}}\PYG{n}{ELEMENT\PYGZus{}DIM}\PYG{p}{,} \PYG{n}{SPACE\PYGZus{}DIM}\PYG{o}{\PYGZgt{}}\PYG{p}{(}\PYG{o}{*}\PYG{n}{p\PYGZus{}cell\PYGZus{}population}\PYG{p}{,} \PYG{n+nb}{true}\PYG{p}{,} \PYG{n+nb}{false}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}} \PYG{c+c1}{// namespace}

\PYG{c+cp}{\PYGZsh{}endif }\PYG{c+cm}{/*OFFLATTICESIMULATIONPROPERTYSTOP\PYGZus{}HPP\PYGZus{}*/}
\end{Verbatim}
